import { Observable } from 'rxjs';
import { ExchangesMarkets } from '../../../models/common/exchanges-markets.type';
import { ExchangeOperationType } from '../../../models/common/exchange-operation-type';
import { IOperationStats, ITraderOperation } from '../../../models/trader/operation.model';
import { ITraderOpenOrderOpts } from '../../../models/trader/open-order-config.model';
import { ITraderCloseOrderOpts } from '../../../models/trader/close-order-config.model';
import { BaseWebsocketService, IStandardWsError } from '../base/ws.service';
export interface IActiveStatsUpdate {
    sym: string;
    xm: ExchangesMarkets;
    stats: IOperationStats;
}
export declare class InstanceTraderService extends BaseWebsocketService {
    private readonly httpClient;
    private readonly operationsOpenErrorsEvents$;
    private readonly operationsCloseErrorsEvents$;
    private readonly newActiveOpsEvents$;
    private readonly closedOpsEvents$;
    private readonly liquidatedOpsEvents$;
    private readonly rejectedOrdersEvents$;
    private readonly cancelledOpenOrdersEvents$;
    private readonly cancelledCloseOrdersEvents$;
    private readonly activeOperationsStatsUpdates$;
    constructor(restAddress: string, wsAddress: string, apiKey: string);
    enableActiveOperationsStatsUpdates(): Promise<void | IStandardWsError>;
    subscribeActiveOperationsStatsUpdates(): Observable<IActiveStatsUpdate>;
    subscribeNewActiveOperationsEvents(): Observable<ITraderOperation>;
    subscribeClosedOperationsEvents(): Observable<ITraderOperation>;
    subscribeLiquidatedOperationsEvents(): Observable<ITraderOperation>;
    subscribeCancelledOpenOrdersEvents(): Observable<ITraderOperation>;
    subscribeCancelledCloseOrdersEvents(): Observable<ITraderOperation>;
    subscribeRejectedOrdersEvents(): Observable<ITraderOperation>;
    subscribeOperationsOpenErrorsEvents(): Observable<string>;
    subscribeOperationsCloseErrorsEvents(): Observable<string>;
    isReady(): Promise<boolean>;
    hasActiveOperation(xm: ExchangesMarkets, symbol: string, type: ExchangeOperationType): Promise<boolean>;
    getActiveOperationsSymbols(): Promise<string[]>;
    getClosedOperation(operationId: string): Promise<ITraderOperation>;
    createNewOperation(opts: ITraderOpenOrderOpts): Promise<string | null>;
    closeOperation(opts: ITraderCloseOrderOpts): Promise<string | null>;
    cancelOpenOrder(operationId: string): Promise<boolean>;
    cancelCloseOrder(operationId: string): Promise<boolean>;
    private liquidatedOpEventHandler;
    private cancelledOpenOrdersEventHandler;
    private cancelledCloseOrdersEventHandler;
    private rejectedOrdersEventHandler;
    private openedOpEventHandler;
    private closedOpEventHandler;
    private operationOpenErrorEventHandler;
    private operationCloseErrorEventHandler;
    private activeOperationsStatsEventHandler;
    private throwIfResponseError;
}
